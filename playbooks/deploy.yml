---
- hosts: all
  roles:
  - base
  - entropy
  - guest_virt_tools
  - selinux
  - openssh

# using phases to ensure handlers are called and deps are really ready
#
# phase 1: Mailman deps
- hosts: mailing
  roles:
  - role: memcached
  - role: postgresql
    backup_databases:
      - mailman
  - role: spamassassin
    service_profile: medium

# phase 2: Mailman installation
- hosts: mail.phx.ovirt.org
  vars:
    webapp_user: mailman_webui
    webapp_path: /var/www/mailman
  tasks:
  - include_role:
      name: mailman3
    vars:
      site_owner_email: "root@{{ ovirt_domain }}"
      site_admins:
        - "duck"
        - "duck-rh"
        - "misc"
        - "eedri"
        - "ederevea"
      from_email: "listmaster@{{ ovirt_domain }}"
      webui_name: "oVirt List Archives"
      webui_basedir: "{{ webapp_path }}"
      webui_user: "{{ webapp_user }}"
      domains:
        lists.ovirt.org: "oVirt mailing-lists"
        mail.phx.ovirt.org: "oVirt mailing-lists"
        mail.ovirt.org: "oVirt mailing-lists"
      http_vhost: "{{ ansible_fqdn }}"
      rest_pw: "{{ mailman_rest_pw }}"
      auth: "{{ social_auth }}"
      with_fedora_auth: True
  - include_role:
      name: httpd
      tasks_from: server
    vars:
      use_wsgi: True
      wsgi_allow_app_signals: True
  - include_role:
      name: httpd
      tasks_from: vhost
    vars:
      website_domain: "{{ ansible_fqdn }}"
      document_root: "{{ webapp_path }}"
      force_tls: True
      use_tls: True
      use_letsencrypt: True
      mail_domain: "{{ ovirt_domain }}"
  - include_role:
      name: httpd
      tasks_from: wsgi
    vars:
      website_domain: "{{ ansible_fqdn }}"
      wsgi_instance: mailman3
      wsgi_script: "{{ webapp_path }}/config/webui.wsgi"
      wsgi_user: "{{ webapp_user }}"
      wsgi_home: "{{ webapp_path }}"
  - include_role:
      name: postgrey
    vars:
      whitelist_clients:
        - gerrit.ovirt.org
        - redhat.com
  - include_role:
      name: sasldb
    vars:
      user_create: "{{ local_mail_accounts }}"
      user_delete:
        - wiki@ovirt.org
      db_group: mail
  - include_role:
      name: postfix
    vars:
      myhostname: "{{ ansible_fqdn }}"
      mynetworks:
        - 66.187.230.42
      auth: sasldb
      tls_method: manual
      cert_file: /etc/pki/tls/certs/star_ovirt_org.bundle.crt
      key_file: /etc/pki/tls/private/star_ovirt_org.key
      with_postgrey: true
      with_mailman3: true
      with_spamassassin: true
      smtpd_options:
        content_filter: spamfilter
      local_accounts:
        - jira
      aliases:
        # Person who should get root's mail
        root: "{{ ['root'] + ovirt_infra_emails }}"
        www: webmaster
        webmaster: root
        noc: root
        hostmaster: root
        info: postmaster
        sales: postmaster
        support: postmaster
        # trap decode to catch security attacks
        decode: root
        contact: "{{ ovirt_infra_ml_pv }}"
        # aliases that jira would use
        infra-support: jira
        community: "{{ ovirt_community_emails }}"
        ## Random new aliases we create
        wordpress: community
        twitter: community
        identica: community
        ovirtbot: "{{ eedri_mail }}"
        kerri: "{{ kerri_mail }}"
        pr: "{{ ovirt_press_emails }}"
        press: "{{ ovirt_press_emails }}"
        hootsuite: "{{ eedri_mail }}"
        quaid: "{{ quaid_mail }}"
        events: community
        ovirt-copr: "{{ eedri_mail }}"
  - include_role:
      name: dovecot
    vars:
      with_pop3: true
      ca_file: /etc/pki/tls/certs/star_ovirt_org.ca.crt
      cert_file: /etc/pki/tls/certs/star_ovirt_org.bundle.crt
      key_file: /etc/pki/tls/private/star_ovirt_org.key
      auth: yaml-dict
  - name: install Dovecot users
    copy:
      src: mailing/users/
      dest: /etc/dovecot/users/

- hosts: web_builders
  vars:
    website_username: web_builder
  roles:
  - role: builder
    name: "{{ website_name }}"
    builder: "{{ website_builder | default('middleman') }}"
    builder_username: "{{ website_username }}"
    git_url: "{{ website_repo_url }}"
    git_version: master
    auto_deploy_hour: "*/6"
    cron_error_email: "{{ osas_builder_error_email }}"
  - role: msmtp
    smart_host: "{{ mail_forwarder }}"
    disable_freeipa: true
  tasks:
  - name: fetch dashboard
    cron:
      name: "fetch dashboard"
      minute: "0"
      hour: "*/6"
      user: "{{ website_username }}"
      job: "cd /srv/builder/{{ website_name }} && ./fetch-dashboard.rb"
    when: website_has_dashboard is defined and website_has_dashboard

